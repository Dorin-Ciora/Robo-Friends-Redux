{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/CounterButtons.js","Components/Header.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","console","log","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButtons","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","PureComponent","Header","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.50cff920.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src ={`https://robohash.org/${id}?200X200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('cardList')\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return ( \r\n                    <Card key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n                    );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    console.log('searchBox')\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className ='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange} \r\n        />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox; ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButtons extends PureComponent {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            count:0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n        return {count: this.state.count + 1}\r\n        })\r\n    }\r\n    render() {\r\n        console.log('CounterButtons')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButtons;","import React, { Component } from 'react';\r\nimport CounterButtons from './CounterButtons';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        console.log('Header')\r\n        return (\r\n        <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButtons color={'red'}/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport Header from '../Components/Header';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n}\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.props.onRequestRobots();\r\n    }\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } =this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n         return isPending ?\r\n            <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n           <Header />\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n            <CardList robots={filteredRobots}/>\r\n            </Scroll> \r\n            </div>\r\n        );\r\n        }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text \r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default: \r\n        return state\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nReactDOM.render(\r\n                <Provider store={store}>\r\n                <App  />\r\n                </Provider>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}